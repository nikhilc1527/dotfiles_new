#+STARTUP: hideall

* use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

* helm
Used for auto-completion in finding files, and a bunch of other cool stuff
** general configuration
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z")  'helm-select-action)

    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    (global-set-key (kbd "C-x b") 'helm-buffers-list)
    (require 'shell)
    (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-inside-p           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-scroll-amount                    8
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t
          helm-autoresize-max-height 0
          helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (helm-mode 1))
#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (yas-global-mode 1))
(use-package yasnippet-snippets)
#+END_SRC

* programming initialization
Load the programming init file
#+BEGIN_SRC emacs-lisp
(org-babel-load-file (concat user-emacs-directory "programminginit.org"))
#+END_SRC

* ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))
               ("org" (name . "^.*org$"))
               ("magit" (mode . magit-mode))
               ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
               ("web" (or (mode . web-mode) (mode . js2-mode)))
               ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
               ("mu4e" (or

                        (mode . mu4e-compose-mode)
                        (name . "\*mu4e\*")
                        ))
               ("programming" (or
                               (mode . clojure-mode)
                               (mode . clojurescript-mode)
                               (mode . python-mode)
                               (mode . c++-mode)
                               (mode . c-mode)
                               (mode . web-mode)
                               (mode . java-mode)))
               ("emacs" (or
                         (name . "^\\*scratch\\*$")
                         (name . "^\\*Messages\\*$")))
               ))))
(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-auto-mode 1)
            (ibuffer-switch-to-saved-filter-groups "default")))

(setq ibuffer-show-empty-filter-groups nil)

(setq ibuffer-expert t)
#+END_SRC


* web stuff
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode) t)
  (setq web-mode-engines-alist
        '(("django"    . "\\.html\\'")))
  (setq web-mode-ac-sources-alist
        '(("css" . (ac-source-css-property))
          ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

* interface tweaks
#+BEGIN_SRC emacs-lisp
         (setq inhibit-startup-message t)
         (defalias 'yes-or-no-p 'y-or-n-p)
         (tool-bar-mode -1)
         (global-set-key (kbd "<f5>") 'revert-buffer)
         (setq visible-bell 1)
         (toggle-scroll-bar -1)
         (show-paren-mode 1)
         (setq electric-pair-preserve-balance nil)
         (global-hl-line-mode 1)
         (save-place-mode t)
         (setq-default indent-tabs-mode nil)
         (put 'erase-buffer 'disabled nil)
         (put 'narrow-to-region 'disabled nil)
         (setq backup-directory-alist '(("." . "~/.config/emacs/backups")))

       (prefer-coding-system       'utf-8)
       (set-default-coding-systems 'utf-8)
       (set-terminal-coding-system 'utf-8)
       (set-keyboard-coding-system 'utf-8)    
       (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
       (set-language-environment "UTF-8")

      ;; (set-frame-parameter (selected-frame) 'alpha '(85 50))
  (set-frame-parameter nil 'alpha-background 85)

    (global-auto-revert-mode t)
  (setq dired-dwim-target t)

  (setq initial-major-mode 'text-mode)
  (setq initial-scratch-message nil)

#+END_SRC

** Cursor type
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
  (set-cursor-color "#AEFF40")
  (set-face-attribute 'region nil 
  :background "#fc9d05"
  :foreground "#0547fc")
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (global-visual-line-mode t)
  (menu-bar-mode -1)
#+END_SRC

** terminal from current directory
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x RET RET") (lambda () (interactive) (start-process "term" nil "alacritty" "--working-directory" ".")))
#+END_SRC

* miscellaneous small packages  
** nyan mode
used for showing position in the current buffer
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :config 
  (nyan-mode 1))
#+END_SRC

** golden ratio mode
used for automatically resizing buffer sizes to be prettier
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :config 
  (golden-ratio-mode 1))
#+END_SRC

** duplicate-thing
Used to duplicate current line
#+BEGIN_SRC emacs-lisp
(use-package duplicate-thing
  :config
  (global-set-key (kbd "M-c") 'duplicate-thing))
#+END_SRC

** expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
  :bind ("C-=" . 'er/expand-region))
#+END_SRC

** Sudo edit
Used for editing files that need sudo privileges
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC

** beacon
When cursor jumps, new cursor position is highlighted so that you dont loose the cursor
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :config
  (beacon-mode 1)
  (setq beacon-color "#00aa33"))
#+END_SRC

** multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-c C-c" . 'mc/edit-lines)
    ("C->" . 'mc/mark-next-like-this)
    ("C-<" . 'mc/mark-previous-like-this)
    ("C-c C-<" . 'mc/mark-all-like-this)
    ("<C-M-mouse-1>" . 'mc/add-cursor-on-click))
#+END_SRC

** which key
Used if you dont remember what the next keystroke in the command is, 
it gives you a small prompt with all possible next key strokes
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config (which-key-mode 1))
#+END_SRC

** ansi color
#+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :config
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on))
#+END_SRC

** uniquify
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
#+END_SRC

** EasyPG (encrypting files)
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(setq epa-file-select-keys nil)
(setq epa-file-encrypt-to '("nikhilc1527@gmail.com"))
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
(setq password-cache-expiry 15)
#+END_SRC

** visual-regexp-steriods
#+BEGIN_SRC emacs-lisp
    (use-package visual-regexp-steroids
          :bind
          ("C-c r" . 'vr/query-replace))
#+END_SRC

** undo tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config
  (global-undo-tree-mode t))
#+END_SRC

** changing backspace functionality
#+BEGIN_SRC emacs-lisp
  ;; https://emacs.stackexchange.com/questions/22266/backspace-without-adding-to-kill-ring
    (defun my-delete-word (arg)
    "Delete characters forward until encountering the end of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (delete-region
     (point)
     (progn
       (forward-word arg)
       (point))))

  (defun my-backward-delete-word (arg)
    "Delete characters backward until encountering the beginning of a word.
  With argument, do this that many times.
  This command does not push text to `kill-ring'."
    (interactive "p")
    (my-delete-word (- arg)))

  (defun my-delete-line ()
    "Delete text from current position to end of line char.
  This command does not push text to `kill-ring'."
    (interactive)
    (delete-region
     (point)
     (progn (end-of-line 1) (point)))
    (delete-char 1))

  (defun my-delete-line-backward ()
    "Delete text between the beginning of the line to the cursor position.
  This command does not push text to `kill-ring'."
    (interactive)
    (let (p1 p2)
      (setq p1 (point))
      (beginning-of-line 1)
      (setq p2 (point))
      (delete-region p1 p2)))

  ; bind them to emacs's default shortcut keys:
  (global-set-key (kbd "C-k") 'my-delete-line)
  (global-set-key (kbd "M-d") 'my-delete-word)
  (global-set-key (kbd "<M-backspace>") 'my-backward-delete-word)
#+END_SRC

** fixmee
#+BEGIN_SRC emacs-lisp
    (use-package fixmee
    :config
    (require 'button-lock)
    (global-fixmee-mode 1))
#+END_SRC

** ace jump mode
#+BEGIN_SRC emacs-lisp
      (use-package ace-jump-mode
        :bind
        ("C-c SPC" . 'ace-jump-mode))
#+END_SRC

** move text
#+BEGIN_SRC emacs-lisp
  (use-package move-text
    :bind
    ("M-p" . 'move-text-up)
    ("M-n" . 'move-text-down))
#+END_SRC

** loccur
#+BEGIN_SRC emacs-lisp
  (use-package loccur
    :bind
    ("C-o" . 'loccur-current)
    ("C-S-o" . 'loccur))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp
(setf custom-safe-themes t)
(use-package gruvbox-theme :ensure t)
(use-package doom-themes :ensure t)
(load-theme 'doom-one)
#+END_SRC

* org-roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-completion-everywhere t)
    :custom
    (org-roam-directory "~/MyFiles/Nikhil/org-roam-files")
    :bind (
         ("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))
#+END_SRC

* org journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal)
#+END_SRC
