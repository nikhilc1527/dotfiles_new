#+STARTUP: hideall

* auto completion
** Company (complete anything) package
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
    :bind
    ;; (:map company-active-map
    ;;       ([tab] . smarter-yas-expand-next-field-complete)
    ;;       ("TAB" . smarter-yas-expand-next-field-complete))
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-begin-commands '(self-insert-command))
    (company-require-match 'never)
    (company-global-modes '(not shell-mode eaf-mode))
    (company-idle-delay 0.1)
    (company-show-numbers t)
    :config
    (setq company-tooltip-align-annotations t)
    (setq company-minimum-prefix-length 1)
    (setq compnay-lsp-enable-snippet t)
    (push 'company-capf company-backends)
  (setq compnay-lsp-enable-snippet t)
  (push 'company-capf company-backends)
    (global-company-mode 1))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode t))
#+END_SRC

* lsp (experimental)
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t
    ;; :commands lsp
    :custom
    (lsp-prefer-flymake nil)
    ;; (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil)
    (lsp-inhibit-message t)
    (lsp-eldoc-render-all nil)
    (lsp-enable-file-watchers nil)
    (lsp-highlight-symbol-at-point nil)

    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :hook ((java-mode python-mode go-mode
                      js-mode js2-mode typescript-mode web-mode
                      c-mode c++-mode objc-mode haskell-mode) . lsp-deferred)
    ((lsp-mode . lsp-enable-which-key-integration))
    :config
      (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5)
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq lsp-idle-delay 0.500)
    (setq lsp-rust-server 'rls)
    (setq lsp-prefer-capf t)

    (setq lsp-enable-snippet t)      ;; Enable snippets
  (setq lsp-prefer-flymake nil)    ;; Use flycheck instead of flymake
  (setq lsp-java-server-install-dir "~/.config/emacs/eclipse.jdt.ls/server/") ;; Set JDTLS path
  (setq lsp-java-java-path "/usr/sbin/java") ;; Set path to Java executable
  (setq lsp-java-vmargs '("-Xmx2G" "-Xms1G" "-XX:+UseG1GC")) ;; Java VM args
  )

#+END_SRC
Lsp user interface
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :requires lsp-mode flycheck
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable nil
        lsp-ui-flycheck-enable t
        lsp-ui-flycheck-list-position 'right
        lsp-ui-flycheck-live-reporting t
        lsp-ui-peek-enable t
        lsp-ui-peek-list-width 60
        lsp-ui-peek-peek-height 25))
#+END_SRC

* rust setup
#+BEGIN_SRC emacs-lisp

  (use-package toml-mode)

  (use-package rust-mode
    :hook (rust-mode . lsp))

  ;; ;; Add keybindings for interacting with Cargo
  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
* python stuff
#+BEGIN_SRC emacs-lisp
  (use-package virtualenvwrapper
    :config
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell))

  ;; (venv-workon "p3")
  (setq lsp-python-executable-cmd "python3")

  (setq python-shell-interpreter "python3"
	python-shell-interpreter-args "-i")

  (setq lsp-pyls-plugins-pycodestyle-enabled 1)
#+END_SRC

* c++ setup
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :config 
  (add-to-list 'company-backends 'company-irony))

(use-package irony
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

(use-package ccls
  :ensure t
  :defer t
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp)))
  :custom
  ;; (ccls-executable (executable-find "/usr/bin/ccls")) ; Add ccls to path if you haven't done so
  (ccls-sem-highlight-method 'font-lock)
  (ccls-enable-skipped-ranges nil)
  :config
  (lsp-register-client
   (make-lsp-client
    :new-connection (lsp-tramp-connection (cons ccls-executable ccls-args))
    :major-modes '(c-mode c++-mode cuda-mode objc-mode)
    :server-id 'ccls-remote
    :multi-root nil
    :remote? t
    :notification-handlers
    (lsp-ht ("$ccls/publishSkippedRanges" #'ccls--publish-skipped-ranges)
            ("$ccls/publishSemanticHighlight" #'ccls--publish-semantic-highlight))
    :initialization-options (lambda () ccls-initialization-options)
    :library-folders-fn nil)))
#+END_SRC

* java setup
#+BEGIN_SRC emacs-lisp

  (use-package lsp-java
  :ensure t
  :after lsp
  :config
  (add-hook 'java-mode-hook #'lsp))

  (use-package dap-mode
    :ensure t
    :after lsp-mode
    :config
    (dap-mode t)
    (dap-ui-mode t))
#+END_SRC

* haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
  (add-hook 'haskell-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   (append '((company-capf company-dabbrev-code))
                           company-backends))))
     (use-package lsp-haskell)
     (use-package flycheck-haskell)
#+END_SRC

* javascript
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js-jsx-mode))
#+END_SRC

* tree-sitter
#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
   '((bash "https://github.com/tree-sitter/tree-sitter-bash")
     (cmake "https://github.com/uyha/tree-sitter-cmake")
     (css "https://github.com/tree-sitter/tree-sitter-css")
     (elisp "https://github.com/Wilfred/tree-sitter-elisp")
     (go "https://github.com/tree-sitter/tree-sitter-go")
     (html "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json "https://github.com/tree-sitter/tree-sitter-json")
     (make "https://github.com/alemuller/tree-sitter-make")
     (markdown "https://github.com/ikatyang/tree-sitter-markdown")
     (python "https://github.com/tree-sitter/tree-sitter-python")
     (toml "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml "https://github.com/ikatyang/tree-sitter-yaml")
     (rust "https://github.com/tree-sitter/tree-sitter-rust")))
#+END_SRC

* copilot
#+BEGIN_SRC emacs-lisp
  (use-package copilot
    :config
    (global-copilot-mode 1)
    (define-key copilot-completion-map (kbd "C-<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "C-M-<tab>") 'copilot-accept-completion-by-word)
    :ensure t)
#+END_SRC
